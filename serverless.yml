service: AWSSelfLearning

provider:
  name: aws
  runtime: java8
  region: global
  versionFunctions: false

  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - s3:PutObject
        - s3:GetObject
        - sns:Publish
        - logs:*
      Resource: "*"

package:
  artifact: build/libs/hello-cloudFormation-1.0-SNAPSHOT.jar

functions:
  index:
    handler: lambda.backoffice
    events:
      - http: GET send

  Lambda1:
    handler: lambda.Lambda1
    timeout: 900
    reservedConcurrency: 100
    events:
      - sns:
          arn: !Ref SuperTopic
          topicName: SuperTopic

  Lambda2:
    handler: lambda.Lambda2
    timeout: 900
    reservedConcurrency: 100

  Lambda3:
    handler: lambda.Lambda3
    timeout: 900
    reservedConcurrency: 100  #ReservedConcurrentExecutions(AWS)
    events:
      - schedule: cron(0 9 ? * 2#1 *) #cron(0/1 * ? * MON-FRI *)

resources:
  Resources:
    SuperTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: MyCustomTopic

    S3FromLambda1Cache:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: lambda1s3

    S3FromLambda2Cache:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: lambda2s3

    OpsEventRule:
      Type: AWS::Events::Rule
      Properties:
        ScheduleExpression: cron(0 9 ? * 2#1 *) # Or EventPattern corn(0/1 * * * ? *)
        Description: EventRuleForSns
        State: ENABLED
        Targets:
          - Arn:
              Ref: SuperTopic
            Id: targetSnsV1

    EventTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: events.amazonaws.com
              Action: sns:Publish
              Resource: '*'
        Topics:
          - !Ref SuperTopic